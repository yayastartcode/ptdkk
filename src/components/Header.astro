---
interface Props {
    logoImage?: string;
    logoText?: string;
}

const { logoImage = '/dblgg.png', logoText = 'Dalbo Kencana Kreasi' } = Astro.props;
---

<header class="fixed w-full top-0 z-50 transition-transform duration-300" id="smart-header">
    <div class="bg-black shadow-md">
        <div class="container mx-auto flex items-center justify-between py-2 px-6">
            <a href="#" class="flex items-center">
                {logoImage ? (
                    <img 
                        src={logoImage} 
                        alt={logoText} 
                        class="h-16 md:h-20 w-auto object-contain transition-all duration-300"
                    >
                ) : (
                    <span class="text-2xl md:text-3xl font-bold text-yellow-400">{logoText}</span>
                )}
            </a>

            <!-- Mobile Menu Button -->
            <button 
                id="mobile-menu-button" 
                class="md:hidden text-yellow-400 hover:text-yellow-300 transition-colors duration-300"
                aria-label="Toggle Menu"
            >
                <i class="fas fa-bars text-2xl"></i>
            </button>

            <!-- Desktop Navigation -->
            <nav class="hidden md:flex items-center space-x-6">
                <a href="#" class="text-base text-yellow-100 hover:text-yellow-400 transition-colors duration-300">Home</a>
                <a href="#" class="text-base text-yellow-100 hover:text-yellow-400 transition-colors duration-300">Services</a>
                <a href="#" class="text-base text-yellow-100 hover:text-yellow-400 transition-colors duration-300">About</a>
                <a 
                    href="#contact" 
                    class="bg-yellow-400 hover:bg-yellow-500 text-black px-4 py-2 rounded-md font-semibold transition-colors duration-300"
                >
                    Contact Us
                </a>
            </nav>

            <!-- Mobile Navigation -->
            <div id="mobile-menu" class="fixed inset-0 bg-black bg-opacity-95 z-50 transform translate-x-full transition-transform duration-300 md:hidden">
                <div class="flex flex-col h-full">
                    <div class="flex justify-between items-center p-6 border-b border-yellow-400/20">
                        <span class="text-xl font-bold text-yellow-400">{logoText}</span>
                        <button id="mobile-menu-close" class="text-yellow-400 hover:text-yellow-300">
                            <i class="fas fa-times text-2xl"></i>
                        </button>
                    </div>
                    <nav class="flex flex-col p-6 space-y-4">
                        <a href="#" class="text-lg text-yellow-100 hover:text-yellow-400 transition-colors duration-300">Home</a>
                        <a href="#" class="text-lg text-yellow-100 hover:text-yellow-400 transition-colors duration-300">Services</a>
                        <a href="#" class="text-lg text-yellow-100 hover:text-yellow-400 transition-colors duration-300">About</a>
                        <a 
                            href="#contact" 
                            class="bg-yellow-400 hover:bg-yellow-500 text-black px-6 py-3 rounded-md font-semibold text-center transition-colors duration-300 mt-4"
                        >
                            Contact Us
                        </a>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    let lastScrollY = window.scrollY;
    const header = document.getElementById('smart-header');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const mobileMenu = document.getElementById('mobile-menu');

    // Handle header scroll behavior
    window.addEventListener('scroll', () => {
        if (!header) return;

        const currentScrollY = window.scrollY;
        const scrollingDown = currentScrollY > lastScrollY;
        
        if (scrollingDown && currentScrollY > 100) {
            header.style.transform = 'translateY(-100%)';
        } else {
            header.style.transform = 'translateY(0)';
        }

        lastScrollY = currentScrollY;
    });

    // Mobile menu toggle
    mobileMenuButton?.addEventListener('click', () => {
        mobileMenu?.classList.remove('translate-x-full');
        document.body.style.overflow = 'hidden';
    });

    mobileMenuClose?.addEventListener('click', () => {
        mobileMenu?.classList.add('translate-x-full');
        document.body.style.overflow = '';
    });

    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
        link.addEventListener('click', () => {
            mobileMenu?.classList.add('translate-x-full');
            document.body.style.overflow = '';
        });
    });

    // Close mobile menu on escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            mobileMenu?.classList.add('translate-x-full');
            document.body.style.overflow = '';
        }
    });
</script>

<style>
    /* Add padding to body to prevent content from jumping when header becomes fixed */
    :global(body) {
        padding-top: 80px; /* Adjusted to match new header height */
    }

    @media (min-width: 768px) {
        :global(body) {
            padding-top: 96px; /* Adjusted for larger screens */
        }
    }
</style> 